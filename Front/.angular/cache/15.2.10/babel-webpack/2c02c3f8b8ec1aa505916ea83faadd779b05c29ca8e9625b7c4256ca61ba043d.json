{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { BarChart, LineChart, PieChart } from 'chartist';\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [configuration]=\"configuration\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\nclass ChartistComponent {\n  elementRef;\n  configuration;\n  /**\n   * Events object where keys are Chartist event names and values are event handler functions.\n   *\n   * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\n   *\n   * Event handler function will receive a data argument which contains event data.\n   */\n  events;\n  /**\n   * Event emitted after Chartist chart has been initialized.\n   *\n   * Event handler function will receive chart instance argument.\n   */\n  initialized = new EventEmitter();\n  chart;\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n  ngOnInit() {\n    if (this.configuration.type && this.configuration.data) {\n      this.renderChart();\n    }\n  }\n  ngOnChanges(changes) {\n    this.update(changes);\n  }\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.detach();\n      this.chart = null;\n    }\n  }\n  renderChart() {\n    const nativeElement = this.elementRef.nativeElement;\n    const {\n      type,\n      data,\n      options,\n      responsiveOptions\n    } = this.configuration;\n    if (type === \"Bar\") {\n      this.chart = new BarChart(nativeElement, data, options, responsiveOptions);\n    } else if (type === \"Line\") {\n      this.chart = new LineChart(nativeElement, data, options, responsiveOptions);\n    } else if (type === \"Pie\") {\n      this.chart = new PieChart(nativeElement, data, options, responsiveOptions);\n    } else {\n      throw new Error(`${type} is not a known chart type`);\n    }\n    if (this.events) {\n      this.bindEvents();\n    }\n    this.initialized.emit(this.chart);\n  }\n  update(changes) {\n    const {\n      type,\n      data,\n      options\n    } = this.configuration;\n    if (!type || !data) {\n      return;\n    }\n    const changedConfiguration = changes.configuration.currentValue;\n    if (!this.chart || changedConfiguration.type !== type) {\n      this.renderChart();\n    } else if (\"data\" in changedConfiguration || \"options\" in changedConfiguration) {\n      this.chart.update(data, options);\n    }\n  }\n  bindEvents() {\n    for (const event of Object.keys(this.events)) {\n      this.chart.on(event, this.events[event]);\n    }\n  }\n  static ɵfac = function ChartistComponent_Factory(t) {\n    return new (t || ChartistComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ChartistComponent,\n    selectors: [[\"x-chartist\"]],\n    inputs: {\n      configuration: \"configuration\",\n      events: \"events\"\n    },\n    outputs: {\n      initialized: \"initialized\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function ChartistComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%]{display:block}\"]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartistComponent, [{\n    type: Component,\n    args: [{\n      selector: \"x-chartist\",\n      template: \"\",\n      styles: [\":host{display:block}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], {\n    configuration: [{\n      type: Input\n    }],\n    events: [{\n      type: Input\n    }],\n    initialized: [{\n      type: Output\n    }]\n  });\n})();\nclass ChartistModule {\n  static ɵfac = function ChartistModule_Factory(t) {\n    return new (t || ChartistModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ChartistModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartistModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ChartistComponent],\n      exports: [ChartistComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ng-chartist-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartistComponent, ChartistModule };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","NgModule","BarChart","LineChart","PieChart","ChartistComponent","elementRef","configuration","events","initialized","chart","constructor","ngOnInit","type","data","renderChart","ngOnChanges","changes","update","ngOnDestroy","detach","nativeElement","options","responsiveOptions","Error","bindEvents","emit","changedConfiguration","currentValue","event","Object","keys","on","ɵfac","ElementRef","ɵcmp","args","selector","template","styles","ChartistModule","ɵmod","ɵinj","declarations","exports"],"sources":["C:/Users/54351/Desktop/Practica1/Front/node_modules/ng-chartist/fesm2022/ng-chartist.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { BarChart, LineChart, PieChart } from 'chartist';\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [configuration]=\"configuration\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\nclass ChartistComponent {\n    elementRef;\n    configuration;\n    /**\n     * Events object where keys are Chartist event names and values are event handler functions.\n     *\n     * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\n     *\n     * Event handler function will receive a data argument which contains event data.\n     */\n    events;\n    /**\n     * Event emitted after Chartist chart has been initialized.\n     *\n     * Event handler function will receive chart instance argument.\n     */\n    initialized = new EventEmitter();\n    chart;\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n    ngOnInit() {\n        if (this.configuration.type && this.configuration.data) {\n            this.renderChart();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update(changes);\n    }\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.detach();\n            this.chart = null;\n        }\n    }\n    renderChart() {\n        const nativeElement = this.elementRef.nativeElement;\n        const { type, data, options, responsiveOptions } = this.configuration;\n        if (type === \"Bar\") {\n            this.chart = new BarChart(nativeElement, data, options, responsiveOptions);\n        }\n        else if (type === \"Line\") {\n            this.chart = new LineChart(nativeElement, data, options, responsiveOptions);\n        }\n        else if (type === \"Pie\") {\n            this.chart = new PieChart(nativeElement, data, options, responsiveOptions);\n        }\n        else {\n            throw new Error(`${type} is not a known chart type`);\n        }\n        if (this.events) {\n            this.bindEvents();\n        }\n        this.initialized.emit(this.chart);\n    }\n    update(changes) {\n        const { type, data, options } = this.configuration;\n        if (!type || !data) {\n            return;\n        }\n        const changedConfiguration = changes.configuration\n            .currentValue;\n        if (!this.chart || changedConfiguration.type !== type) {\n            this.renderChart();\n        }\n        else if (\"data\" in changedConfiguration ||\n            \"options\" in changedConfiguration) {\n            this.chart.update(data, options);\n        }\n    }\n    bindEvents() {\n        for (const event of Object.keys(this.events)) {\n            this.chart.on(event, this.events[event]);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: ChartistComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.3\", type: ChartistComponent, selector: \"x-chartist\", inputs: { configuration: \"configuration\", events: \"events\" }, outputs: { initialized: \"initialized\" }, usesOnChanges: true, ngImport: i0, template: \"\", isInline: true, styles: [\":host{display:block}\\n\"] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: ChartistComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"x-chartist\", template: \"\", styles: [\":host{display:block}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { configuration: [{\n                type: Input\n            }], events: [{\n                type: Input\n            }], initialized: [{\n                type: Output\n            }] } });\n\nclass ChartistModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: ChartistModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.3\", ngImport: i0, type: ChartistModule, declarations: [ChartistComponent], exports: [ChartistComponent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: ChartistModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: ChartistModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ChartistComponent],\n                    exports: [ChartistComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-chartist-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartistComponent, ChartistModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}