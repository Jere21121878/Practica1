{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/enviroments/environment.development';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.Url + 'api/Authentication/';\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    // Verificar si el usuario está autenticado al iniciar el servicio\n    this.checkAuthenticated();\n  }\n  login(model) {\n    return this.http.post(this.apiUrl + 'login', model).pipe(tap(() => {\n      this.isLoggedInSubject.next(true); // Emitir que el usuario está autenticado\n    }));\n  }\n\n  saveUserData(userData) {\n    localStorage.setItem('userData', JSON.stringify(userData));\n  }\n  // Método para obtener la información del usuario desde el almacenamiento local\n  getUserData() {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.isLoggedInSubject.next(false); // Emitir que el usuario ya no está autenticado\n  }\n\n  checkAuthenticated() {\n    const token = localStorage.getItem('token');\n    this.isLoggedInSubject.next(!!token); // Emitir si hay un token presente\n  }\n\n  register(model) {\n    const headers = new HttpHeaders({});\n    return this.http.post(this.apiUrl + 'registration', model);\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,WAAW,QAAQ,yCAAyC;AAGrE,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,qBAAqB;EAMhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB,WAAM,GAAWL,WAAW,CAACM,GAAG,GAAG,qBAAqB;IAEhD,sBAAiB,GAA6B,IAAIL,eAAe,CAAU,KAAK,CAAC;IAClF,gBAAW,GAAwB,IAAI,CAACM,iBAAiB,CAACC,YAAY,EAAE;IAG7E;IACA,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EACAC,KAAK,CAACC,KAAiB;IACrB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,IAAI,CAACC,MAAM,GAAG,OAAO,EAAEF,KAAK,CAAC,CAACG,IAAI,CAC3DZ,GAAG,CAAC,MAAK;MACP,IAAI,CAACK,iBAAiB,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,CACH;EACH;;EACAC,YAAY,CAACC,QAAa;IACxBC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;EAC5D;EAEA;EACAK,WAAW;IACT,MAAML,QAAQ,GAAGC,YAAY,CAACK,OAAO,CAAC,UAAU,CAAC;IACjD,OAAON,QAAQ,GAAGG,IAAI,CAACI,KAAK,CAACP,QAAQ,CAAC,GAAG,IAAI;EAC/C;EACAQ,MAAM;IACJP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACnB,iBAAiB,CAACQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACtC;;EAEQN,kBAAkB;IACxB,MAAMkB,KAAK,GAAGT,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAAChB,iBAAiB,CAACQ,IAAI,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC;EACxC;;EAEAC,QAAQ,CAACjB,KAAwB;IAC/B,MAAMkB,OAAO,GAAG,IAAI9B,WAAW,CAAC,EAAE,CAAC;IACnC,OAAO,IAAI,CAACM,IAAI,CAACO,IAAI,CAAM,IAAI,CAACC,MAAM,GAAG,cAAc,EAAEF,KAAK,CAAC;EACjE;EAAC;qBAvCUR,qBAAqB;EAAA;EAAA;WAArBA,qBAAqB;IAAA2B,SAArB3B,qBAAqB;IAAA4B,YAFpB;EAAM","names":["HttpHeaders","environment","BehaviorSubject","tap","AuthenticationService","constructor","http","Url","isLoggedInSubject","asObservable","checkAuthenticated","login","model","post","apiUrl","pipe","next","saveUserData","userData","localStorage","setItem","JSON","stringify","getUserData","getItem","parse","logout","removeItem","token","register","headers","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\54351\\Desktop\\Practica1\\Front\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/enviroments/environment.development';\nimport { LoginModel } from '../interfaces/login-model';\nimport { RegistrationModel } from '../interfaces/registration-model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  apiUrl: string = environment.Url + 'api/Authentication/';\n  vendedorId?: string; // Agrega esta propiedad\n  private isLoggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Verificar si el usuario está autenticado al iniciar el servicio\n    this.checkAuthenticated();\n  }\n  login(model: LoginModel): Observable<any> {\n    return this.http.post<any>(this.apiUrl + 'login', model).pipe(\n      tap(() => {\n        this.isLoggedInSubject.next(true); // Emitir que el usuario está autenticado\n      })\n    );\n  }\n  saveUserData(userData: any): void {\n    localStorage.setItem('userData', JSON.stringify(userData));\n  }\n\n  // Método para obtener la información del usuario desde el almacenamiento local\n  getUserData(): any {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n  logout(): void {\n    localStorage.removeItem('token');\n    this.isLoggedInSubject.next(false); // Emitir que el usuario ya no está autenticado\n  }\n\n  private checkAuthenticated(): void {\n    const token = localStorage.getItem('token');\n    this.isLoggedInSubject.next(!!token); // Emitir si hay un token presente\n  }\n\n  register(model: RegistrationModel ) {\n    const headers = new HttpHeaders({});\n    return this.http.post<any>(this.apiUrl + 'registration', model);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}